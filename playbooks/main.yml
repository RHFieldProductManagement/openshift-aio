---
# vim: set ft=ansible:

# Step 0: Configure facts based on vars selection
- name: Set fact for OCP deployment if requesting dependents
  hosts: localhost
  tasks:
    - name: Get facts playbook
      include_tasks: set_facts.yml

# Step 1: Deploy Base Infrastructure on provider
- import_playbook: "./{{ baremetal_provider }}/base_infra.yml"

# Step 2: Create inventory
- hosts: localhost
  roles:
    - create_inventory
# Step 2b: Prepare DDNS entries
  tasks:
    - name: Create DNS entries for OpenShift FIPs
      debug:
        msg: Currently using {{ cluster_dns_zone }} on server {{ cluster_dns_server }}
      when: ocp4_aio_use_ddns

    - set_fact:
        ocp_api_fip: "{{ groups['target'][0] }}"
      when: ocp4_aio_use_ddns

    - set_fact:
        ocp_ingress_fip: "{{ groups['target'][0] }}"
      when: ocp4_aio_use_ddns

    - set_fact:
        ocp_proxy_fip: "{{ groups['target'][0] }}"
      when: ocp4_aio_use_ddns

    - name: Add DNS entry for OpenShift API and ingress
      nsupdate:
        server: >-
          {{ cluster_dns_server
          | ipaddr
          | ternary(cluster_dns_server, lookup('dig', cluster_dns_server))
          }}
        zone: "{{ cluster_dns_zone }}"
        record: "{{ item.dns }}.{{ guid }}"
        type: A
        ttl: 5
        port: "{{ cluster_dns_port | d('53') }}"
        value: "{{ item.name }}"
        key_name: "{{ ddns_key_name }}"
        key_secret: "{{ ddns_key_secret }}"
      loop:
        - name: "{{ ocp_api_fip }}"
          dns: "api"
        - name: "{{ ocp_ingress_fip }}"
          dns: "*.apps"
        - name: "{{ ocp_proxy_fip }}"
          dns: "proxy"
      loop_control:
        label: item.name
      when: ocp4_aio_use_ddns

# Step 3 : Prepare Base Host
- hosts: target
  gather_facts: true
  tasks:

    - name: Generate the root password
      set_fact:
        bastion_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits') }}"

    - name: add bastion_password variable to dummy host
      add_host:
        name: "passwd_holder"
        root_password:  "{{ bastion_password }}"

    - name: Setup base software
      include_role:
        name: base_software
      vars: 
        ocp4_aio_baremetal_provider: "{{ baremetal_provider }}"

    - name: Setup base virt
      include_role:
        name: base_virt
      vars:
        aio_host_ip_address: "{{ groups['target'][0] }}"
        ocp4_aio_root_password: "{{ bastion_password }}"

    - name: Prepare bastion VM
      include_role:
        name: prepare_bastion
      vars:
        ocp4_aio_root_password: "{{ bastion_password }}"

    - name: deploy Guacamole
      include_role:
        name: deploy_guac
      when: ocp4_aio_deploy_guacamole
      vars:
        ocp4_aio_root_password: "{{ bastion_password }}"

# Step 4 : Prepare Bastion VM 
- hosts: bastion
  gather_facts: false
  tasks:
    - include_role:
        name: deploy_bastion
      vars:
        ocp4_aio_root_password: "{{ bastion_password }}"

  tasks:
# Step 5 : Deploy Openshift or SNO
    - name: deploy OCP
      include_role:
        name: deploy_ocp
      vars:
        aio_host_ip_address: "{{ groups['target'][0] }}"
      when: 
        - ocp4_aio_deploy_type == 'upi' or ocp4_aio_deploy_type == 'ipi'
        - ocp4_aio_deploy_ocp

- hosts: target
  tasks:
    - name: Deploy SNO
      include_role:
        name: deploy_ocp
      when: 
        - ocp4_aio_deploy_type == "sno"
        - ocp4_aio_deploy_ocp

# Step 5 : Get infos from deployments
- hosts: localhost
  roles:
    - generate_configs

# Step 6 : Deploy operators on OCP
- hosts: bastion
  tasks:

    - name: Setting up NFS Storage
      include_role: 
        name: ocp4_role_nfsmount
      when: 
        - ocp4_aio_deploy_nfs or not ocp4_aio_deploy_ocs
        - ocp4_aio_deploy_ocp

    - name: Setting up OCS Storage
      include_role:
        name: ocp4_role_ocs
      when: 
        - ocp4_aio_deploy_ocs 
        - ocp4_aio_deploy_ocp

    - name: Deploy internal registry
      include_role:
        name: ocp4_role_imgreg
      when: ocp4_aio_deploy_ocp

    - name: Installing ACM
      include_role:
        name: ocp4_role_acm
      when: 
        - ocp4_aio_deploy_acm or ocp4_aio_deploy_ocp_plus or ocp4_aio_deploy_sno
        - ocp4_aio_deploy_ocp

    - name: Installing ACS
      include_role:
        name: ocp4_role_acs
      when: 
        - ocp4_aio_deploy_acs or ocp4_aio_deploy_ocp_plus or ocp4_aio_deploy_sno
        - ocp4_aio_deploy_ocp

    - name: Installing CNV
      include_role:
        name: ocp4_role_cnv
      when: 
        - ocp4_aio_deploy_cnv
        - ocp4_aio_deploy_ocp

    - name: Deploy OpenShift Virtualization LAB
      include_role:
        name: ocp4_role_deploy_cnvlab
      when: 
        - ocp4_aio_deploy_cnvlab
        - ocp4_aio_deploy_ocp
  
# Step 7: Print Output to User
- import_playbook: finish.yml
  when: not ocp4_aio_deploy_sno | bool

# Step 7-SNO: Print Output to User
- import_playbook: finish_sno.yml
  when: ocp4_aio_deploy_sno
