---
# vim: set ft=ansible:

- name: Deploy base software configuration
  gather_facts: true
  remote_user: root
  hosts: target
  tasks:

    - name: Ensure podman is available
      dnf:
        name:
          - podman
        state: latest
      become: True

    - name: Check if firewalld is available
      ansible.builtin.command: systemctl status firewalld
      register: firewalld_avail
      failed_when: firewalld_avail.rc == 1

    - name: Enable firewalld if it's available
      ansible.builtin.systemd:
        name: firewalld
        enabled: yes
        state: started
      when:
        - firewalld_avail.rc < 4

    - name: Enable firewalld ports for Guacamole
      firewalld:
        port: "{{ item }}"
        zone: public
        permanent: yes
        state: enabled
      loop:
        - "8080/tcp"
      when: 
       - firewalld_avail.rc != 4

    - name: Reload Firewalld
      ansible.builtin.command: firewall-cmd --reload
      register: firewalld_return
      failed_when: firewalld_return.rc > 0
      when:
        - firewalld_avail.rc != 4

    - name: Enable iptables ports for Guacamole
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item }}"
        jump: ACCEPT
      loop:
        - "8080"
      when:
        - firewalld_avail.rc == 4

    - name: Make sure that postgres directory exists
      ansible.builtin.file:
        path: "/usr/local/pgsql/data"
        state: directory

    - name: Pull required images for Guacamole
      containers.podman.podman_image:
        name: "{{ item }}"
      loop:
        - "quay.io/roxenham/guacamole"
        - "quay.io/roxenham/guacd"
        - "quay.io/roxenham/postgres"

    - name: Run postgres container for Guac
      containers.podman.podman_container:
        name: postgres
        state: present
        image: quay.io/roxenham/postgres
        volume: "/usr/local/pgsql/data:/var/lib/postgresql/data"
        net: host
        env: "POSTGRES_PASSWORD=redhat"

    - name: Check if database has been created already
      ansible.builtin.stat:
        path: "/usr/local/pgsql/data/initdb.sql"
      register: database_stat

    - name: Generate the initdb database content for postgres
      ansible.builtin.shell: >
        podman run --rm quay.io/roxenham/guacamole
        /opt/guacamole/bin/initdb.sh --postgres > /usr/local/pgsql/data/initdb.sql
      when: not database_stat.stat.exists

    - name: Generate random password for guacadmin user
      ansible.builtin.shell: >
        cat /dev/urandom | tr -dc _A-Z-a-z-0-9 | head -c12
      register: random_out
      when: not database_stat.stat.exists

    - name: Get sha256sum for random password
      ansible.builtin.shell: >
        echo -n {{ random_out.stdout }} | sha256sum | awk '{print $1;}'
      register: random_sha256
      when: not database_stat.stat.exists

    - set_fact:
        guacadmin_password: "{{ random_out.stdout }}"
      when: not database_stat.stat.exists

    - set_fact:
        guacadmin_password_sha256: "{{ random_sha256.stdout }}"
      when: not database_stat.stat.exists

    - name: add guacadmin_password variable to dummy host
      add_host:
        name: "guac_holder"
        guac_shared_password:  "{{ guacadmin_password }}"
      when: not database_stat.stat.exists

    - name: Reset guacadmin password in initdb.sql
      ansible.builtin.replace:
        path: /usr/local/pgsql/data/initdb.sql
        regexp: 'CA458A7D494E3BE824F5E1E175A1556C0F8EEF2C2D7DF3633BEC4A29C4411960'
        replace: "{{ guacadmin_password_sha256 }}"
      when: not database_stat.stat.exists

    - name: Create the guacamole_db in the postgres container
      ansible.builtin.command: >
        podman exec -it postgres createdb -U postgres guacamole_db
      when: not database_stat.stat.exists

    - name: Import the initdb.sql content
      ansible.builtin.command: >
        podman exec -it postgres psql -U postgres
        -d guacamole_db -f /var/lib/postgresql/data/initdb.sql
      when: not database_stat.stat.exists

    - name: Grant privileges for Guacamole in Postgres and remove password salt
      ansible.builtin.shell: >
        podman exec -it postgres psql -U postgres -d guacamole_db -c {{ item }}
      loop:
        - "\"UPDATE guacamole_user SET password_salt=NULL;\""
        - "\"CREATE USER guacamole_user WITH PASSWORD 'redhat'\""
        - "\"GRANT SELECT,INSERT,UPDATE,DELETE ON ALL TABLES IN SCHEMA public TO guacamole_user\""
        - "\"GRANT SELECT,USAGE ON ALL SEQUENCES IN SCHEMA public TO guacamole_user\""
      register: privileges_result
      when: not database_stat.stat.exists
      failed_when: '"FATAL" in privileges_result.stdout'

    - name: Create connection entries in Guacamole
      ansible.builtin.shell: >
        podman exec -it postgres psql -U postgres -d guacamole_db -c {{ item }}
      loop:
        - "\"INSERT INTO guacamole_connection (connection_name, protocol) VALUES ('Bastion SSH', 'ssh')\""
        - "\"INSERT INTO guacamole_connection_parameter VALUES (1, 'hostname', '192.168.123.100')\""
        - "\"INSERT INTO guacamole_connection_parameter VALUES (1, 'port', '22')\""
        - "\"INSERT INTO guacamole_connection_parameter VALUES (1, 'username', 'root')\""
        - "\"INSERT INTO guacamole_connection_parameter VALUES (1, 'password', 'redhat')\""
        - "\"INSERT INTO guacamole_connection (connection_name, protocol) VALUES ('Lab Desktop', 'vnc')\""
        - "\"INSERT INTO guacamole_connection_parameter VALUES (2, 'hostname', '192.168.123.100')\""
        - "\"INSERT INTO guacamole_connection_parameter VALUES (2, 'port', '5999')\""
        - "\"INSERT INTO guacamole_connection_parameter VALUES (2, 'password', 'redhat')\""
      register: connections_result
      when: not database_stat.stat.exists
      failed_when: '"FATAL" in connections_result.stdout'

    - name: Run GuacD container
      containers.podman.podman_container:
        name: guacd
        state: present
        image: quay.io/roxenham/guacd
        net: host

    - name: Run Guacamole container
      containers.podman.podman_container:
        name: guacamole
        state: present
        image: quay.io/roxenham/guacamole
        net: host
        env:
          GUACD_HOSTNAME: 127.0.0.1
          POSTGRES_HOSTNAME: 127.0.0.1
          POSTGRES_DATABASE: guacamole_db
          POSTGRES_USER: guacamole_user
          POSTGRES_PASSWORD: redhat

- name: Store the Guacamole password locally
  gather_facts: false
  hosts: localhost
  tasks:

    - name: Write guacadmin password locally
      ansible.builtin.lineinfile:
        path: ../generated/guacadmin-password.txt
        line: "{{ hostvars['guac_holder']['guac_shared_password'] }}"
        create: yes
      when: hostvars['guac_holder'] is defined

- name: Deploy VNC server on bastion
  gather_facts: false
  remote_user: root
  hosts: bastion
  tasks:

    - name: Install GUI packages for Guac VNC session
      dnf:
        name:
          - "@Server with GUI"
          - tigervnc-server
        state: latest
      become: True

    - set_fact:
        labuser_password: "redhat"

    - name: Ensure VNC directory exists for root
      ansible.builtin.file:
        path: /root/.vnc/
        state: directory

    - name: Reset VNC password for root
      ansible.builtin.shell: >
        echo {{ labuser_password }} | vncpasswd -f > /root/.vnc/passwd

    - name: Delete existing VNC configuration for root
      ansible.builtin.file:
        path: /root/.vnc/config
        state: absent

    - name: Create VNC configuration for root
      ansible.builtin.blockinfile:
        create: yes
        path: /root/.vnc/config
        block: |
         session=gnome
         geometry=1920x1080
         localhost=no
         alwaysshared

    - name: Reset permissions for /root/.vnc/config
      ansible.builtin.file:
        path: /root/.vnc/config
        mode: '0755'
        setype: _default

    - name: Reset permissions for /root/.vnc/passwd
      ansible.builtin.file:
        path: /root/.vnc/passwd
        mode: '0600'
        setype: _default

    - name: Delete existing VNC	configuration for root
      ansible.builtin.file:
        path: /etc/tigervnc/vncserver.users
        state: absent

    - name: Ensure port 99 is for root VNC
      ansible.builtin.lineinfile:
        path: /etc/tigervnc/vncserver.users
        line: ":99=root"
        create: yes

    - name: Enable VNC for port 5999
      ansible.builtin.systemd:
        name: "vncserver@:99"
        enabled: yes
        daemon_reload: yes
        state: started

    - name: Enable firewalld ports for VNC
      firewalld:
        port: "{{ item }}"
        zone: public
        permanent: yes
        state: enabled
      loop:
        - "5999/tcp"

    - name: Reload Firewalld
      ansible.builtin.command: firewall-cmd --reload
      register: firewalld_return
      failed_when: firewalld_return.rc > 0
