---
# vim: set ft=ansible:

- name: Label nodes for OpenShift Storage when compact
  ansible.builtin.command: >
    oc label nodes --overwrite ocp4-{{ item.key }}.aio.example.com cluster.ocs.openshift.io/openshift-storage=''
  with_dict: "{{ vms['masters'] }}"
  when:
    - deploy_compact or hostvars['localhost']['override_deploy_compact']

- name: Label nodes for OpenShift Storage when not compact
  ansible.builtin.command: >
    oc label nodes --overwrite ocp4-{{ item.key }}.aio.example.com cluster.ocs.openshift.io/openshift-storage=''
  with_dict: "{{ vms['workers'] }}"
  when:
    - not deploy_compact

- name: Copy over k8s-aio env requirements.txt
  ansible.builtin.copy:
    src: requirements.txt
    dest: /tmp/requirements.txt

- name: "Create k8s-aio venv"
  pip:
    requirements: "/tmp/requirements.txt"
    virtualenv: "/opt/virtualenvs/k8s-aio"
    virtualenv_site_packages: true
    virtualenv_command: "/usr/bin/virtualenv"

- name: "Set Ansible interpreter to venv"
  set_fact:
    ansible_python_interpreter: /opt/virtualenvs/k8s-aio/bin/python

- name: Apply local-storage-operator configuration
  k8s:
    state: present
    definition: "{{ lookup('file', 'local-storage-operator.yaml') }}"
  register: local_storage_success
  retries: 5
  delay: 30
  until: local_storage_success is not failed

- name: Apply local-volume configuration
  k8s:
    state: present
    definition: "{{ lookup('file', 'local-volume.yaml') }}"
  register: local_volume_success
  retries: 5
  delay: 30
  until: local_volume_success is not failed

- name: Apply ocs-operator configuration
  k8s:
    state: present
    definition: "{{ lookup('file', 'ocs-operator.yaml') }}"
  register: ocs_operator_success
  retries: 5
  delay: 30
  until: ocs_operator_success is not failed

- name: Apply storage-cluster configuration
  k8s:
    state: present
    definition: "{{ lookup('file', 'storage-cluster.yaml') }}"
  register: storage_cluster_success
  retries: 5
  delay: 30
  until: storage_cluster_success is not failed

- name: Set default storage class to be ocs-storagecluster-ceph-rbd
  ansible.builtin.command: >
    oc patch storageclass ocs-storagecluster-ceph-rbd 
    -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
  register: default_class_success
  retries: 5
  delay: 30
  until: default_class_success is not failed

- name: Enable Ceph Tools pod for troubleshooting
  ansible.builtin.command: >
    oc patch OCSInitialization ocsinit -n openshift-storage
    --type json --patch '[{ "op": "replace", "path": "/spec/enableCephTools", "value": true }]'
  register:	ceph_tools_success
  retries: 5
  delay: 30
  until: ceph_tools_success is not failed
