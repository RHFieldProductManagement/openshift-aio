---
# vim: set ft=ansible:


- name: Copy over k8s-aio env requirements.txt
  ansible.builtin.copy:
    src: requirements.txt
    dest: /tmp/requirements.txt

- name: "Create k8s-aio venv"
  pip:
    requirements: "/tmp/requirements.txt"
    virtualenv: "/opt/virtualenvs/k8s-aio"
    virtualenv_site_packages: true
    virtualenv_command: "/usr/bin/virtualenv"

- name: "Set Ansible interpreter to venv"
  set_fact:
    ansible_python_interpreter: /opt/virtualenvs/k8s-aio/bin/python

- name: Create project for workbook
  k8s:
    state: present
    definition: "{{ lookup('file', '../labs/cnv/conf/cnvlab-project.yaml') }}"
  register: project_success
  retries: 3
  delay: 30
  until: project_success is not failed
 
- name: Deploy Workbook Instance for CNV Labs
  block:
  - name: Configure and apply build template
    shell: >-
      oc -n workbook process
      -f ~/openshift-virt-labs/docs/build-template.yaml -p NAME=cnv | oc -n workbook apply -f -
    register: buildt_success
    retries: 3
    delay: 30
    until: buildt_success is not failed

  - name: Start the build
    shell: oc -n workbook start-build cnv --from-dir=openshift-virt-labs/docs/
    register: build_success
    retries: 3
    delay: 30
    until: build_success is not failed

  - name: Configure and deploy the deploy template
    shell: >-
      oc -n workbook process
      -f ~/openshift-virt-labs/docs/deploy-template.yaml -p NAME=cnv -p IMAGE_STREAM_NAME=cnv
      | oc -n workbook apply -f -
    register: deploy_success
    retries: 3
    delay: 30
    until: deploy_success is not failed

- name: Give cluster-admin privileges to CNV user
  k8s:
    state: present
    definition: "{{ lookup('file', '../labs/cnv/conf/cnvlab-admin.yaml') }}"
  register: clusteradmin_success
  retries: 3
  delay: 30
  until: clusteradmin_success is not failed
