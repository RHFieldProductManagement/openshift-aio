---
# vim: set ft=ansible:

- name: Wait for Bastion machine to start
  wait_for_connection:
    timeout: 120
  register: result
  until: result is succeeded
  retries: 3
  delay: 30

- name: Grow root disk
  ansible.builtin.command: growpart /dev/vda 1
  ignore_errors: true

- name: Resize partition to fill disk
  ansible.builtin.command: xfs_growfs /

- name: Set Bastion hostname
  ansible.builtin.hostname:
    name: ocp4-bastion.aio.example.com

- name: Install required base packages
  dnf:
    name:
      - qemu-img
      - jq
      - git
      - httpd
      - squid
      - dhcp-server
      - xinetd
      - net-tools
      - nano
      - bind
      - bind-utils
      - haproxy
      - wget
      - syslinux
      - libvirt-libs
      - tftp-server
      - syslinux-tftpboot
      - firewalld
      - python3-virtualenv
      - podman
    state: latest

- name: Upgrade all packages
  dnf:
    name: "*"
    state: latest

- name: Create SSH keypair
  openssh_keypair:
    path: "~/.ssh/id_rsa"
    type: rsa
    size: 4096
    state: present
    force: no

- name: Enable Firewalld
  ansible.builtin.systemd:
    name: firewalld
    enabled: yes
    state: started

- name: Enable Bastion services in firewall
  firewalld:
    permanent: yes
    state: enabled
    service: "{{ item }}"
  loop:
    - dhcp
    - dns
    - http
    - https
    - squid
    - nfs3
    - mountd
    - rpc-bind
    - nfs

- name: Enable extra Bastion ports in firewall
  firewalld:
    permanent: yes
    state: enabled
    port: "{{ item }}"
  loop:
    - "6443/tcp"
    - "8443/tcp"
    - "9001/tcp"
    - "22623/tcp"
    - "81/tcp"

- name: Reload Firewalld
  ansible.builtin.command: firewall-cmd --reload
  register: firewalld_return
  failed_when: firewalld_return.rc > 0

- name: Make NFS PV and TFTPboot directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0777
    recurse: yes
  loop:
    - "/nfs/pv1"
    - "/nfs/pv2"
    - "/nfs/pv3"
    - "/nfs/pv4"
    - "/nfs/pv5"
    - "/var/lib/tftpboot/pxelinux/pxelinux.cfg/"

- name: Setting up NFS config
  ansible.builtin.lineinfile:
    path: /etc/exports
    line: /nfs *(rw,no_root_squash)
    create: yes

- name: Setting up HTTPD config
  ansible.builtin.lineinfile:
    path: /etc/httpd/conf/httpd.conf
    regexp: '^Listen '
    insertafter: '^#Listen '
    line: Listen 81

- name: Copy over DHCP config file for SNO
  ansible.builtin.copy:
    src: services/dhcpd-sno.conf
    dest: /etc/dhcp/dhcpd.conf
    mode: 0644
  when: deploy_type == "sno-iso"

- name: Copy over Squid config file
  ansible.builtin.copy:
    src: services/squid.conf
    dest: /etc/squid/squid.conf
    mode: 0644

- name: Copy over named config file for SNO
  ansible.builtin.copy:
    src: services/named-sno.conf
    dest: /etc/named.conf
    mode: 0644
  when: deploy_type == "sno-iso"

- name: Copy over DNS zone files for SNO
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /var/named
    mode: 0644
  loop:
    - "services/rhacm.example.com.db"
    - "services/edge1.example.com.db"
    - "services/edge2.example.com.db"
    - "services/edge3.example.com.db"
    - "services/edge4.example.com.db"
    - "services/123.168.192-sno.db"
  when: deploy_type == "sno-iso"

- name: Rename DNS zone file for IPI
  ansible.builtin.command: mv /var/named/123.168.192-sno.db /var/named/123.168.192.db
  when: deploy_type == "sno-iso"  

- name: Make sure DHCPD leases file exists
  ansible.builtin.file:
    path: /var/lib/dhcpd/dhcpd.leases
    state: touch

- name: Enable Bastion Services
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - httpd
    - named
    - squid
    - dhcpd
    - rpcbind
    - nfs-server

- name: Rebooting Bastion VM
  reboot:
    reboot_timeout: 600

- name: Get RHCOS version to use
  set_fact:
    subversion: "{{ ocp_version.split('latest-')[1] if ('latest' in ocp_version) else ocp_version.split('.')[:2]|join('.') }}"

- name: Download OpenShift Client
  ansible.builtin.get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-client-linux.tar.gz
    dest: /root
    mode: 0644

- name: Download OpenShift Installer
  ansible.builtin.get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-install-linux.tar.gz
    dest: /root
    mode: 0644

- name: Unpack OpenShift Client & Installer
  ansible.builtin.unarchive:
    remote_src: yes
    src: "{{ item }}"
    dest: /usr/bin
  loop:
    - "/root/openshift-install-linux.tar.gz"
    - "/root/openshift-client-linux.tar.gz"

- name: Remove OpenShift client and installer tarballs
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/root/openshift-install-linux.tar.gz"
    - "/root/openshift-client-linux.tar.gz"

- name: Reset permissions for /var/www/html
  ansible.builtin.file:
    path: /var/www/html
    recurse: yes
    mode: '0755'
    setype: _default
