
- name: Get a list of all running VM's
  virt:
    command: list_vms
    state: running
  register: running_vm_list

- name: Check if live ISO disk image already exists
  stat:
    path: /root/lab/base.iso
  register: base_result

- name: Check if embedded ISO disk image already exists
  stat:
    path: /var/lib/libvirt/images/sno-edge2/embedded.iso
  register: embed_result

- name: Downloading live ISO
  ansible.builtin.get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/latest/latest/rhcos-4.8.2-x86_64-live.x86_64.iso
    dest: "/root/lab/base.iso"
    mode: 0644
  when: not embed_result.stat.exists

- name: Copy live ISO to edge directory
  ansible.builtin.copy:
    remote_src: yes
    src: /root/lab/base.iso
    dest: "/root/sno-{{ item }}/base.iso"
  loop:
    - rhacm
    - edge1
    - edge2
  when: not embed_result.stat.exists

- name: Copy install-config over to bastion for SNO
  ansible.builtin.copy:
    src: install-config-sno.yaml
    dest: /root/lab/install-config.yaml

- name: Grab contents of Bastions SSH public key
  ansible.builtin.command: cat /root/.ssh/id_rsa.pub
  register: bastion_ssh

- name: Insert ssh pub key into install-config
  ansible.builtin.lineinfile:
    path: /root/lab/install-config.yaml
    regexp: '^sshKey: '
    insertafter: '^#sshKey: '
    line: "sshKey: '{{ bastion_ssh.stdout }}'"

- name: Insert pull secret into install-config
  ansible.builtin.lineinfile:
    path: /root/lab/install-config.yaml
    regexp: '^pullSecret: '
    insertafter: '^#pullSecret: '
    line: "pullSecret: '{{ pull_secret }}'"

- name: Copy lab install-config to SNO install directory
  ansible.builtin.copy:
    remote_src: yes
    src: /root/lab/install-config.yaml
    dest: /root/sno-{{ item }}/install-config.yaml
  loop:
    - rhacm
    - edge1
    - edge2
  when: not embed_result.stat.exists

- name: Update Cluster name in install-config
  ansible.builtin.replace:
    path: /root/sno-{{ item }}/install-config.yaml
    regexp: 'CLUSTER_NAME'
    replace: "{{ item }}"
  loop:
    - rhacm
    - edge1
    - edge2
  when: not embed_result.stat.exists

- name: Change Installation disk reference in install-config
  ansible.builtin.replace:
    path: /root/sno-{{ item }}/install-config.yaml
    regexp: 'INSTALLATION_DISK'
    replace: "/dev/vda"
  loop:
    - rhacm
    - edge1
    - edge2
  when: not embed_result.stat.exists

- name: Generating ignition files
  ansible.builtin.shell: "openshift-install create single-node-ignition-config --dir=/root/sno-{{ item }}"
  loop:
    - rhacm
    - edge1
    - edge2 
  when: not embed_result.stat.exists

- name: Generating install manifests
  ansible.builtin.shell: "openshift-install create manifests --dir=/root/sno-{{ item }}"
  loop:
    - rhacm
    - edge1
    - edge2
  when: not embed_result.stat.exists

- name: remove existing ISO builders (if any)
  containers.podman.podman_container:
    name: embed_ignition_{{ item }}
    state: absent
  loop:
    - rhacm
    - edge1
    - edge2

- name: Embed ignition in install ISO
  containers.podman.podman_container:
    name: embed_ignition_{{ item }}
    state: present
    image: quay.io/coreos/coreos-installer:release
    privileged: yes
    volume:
      - "/dev:/dev"
      - "/run/udev:/run/udev"
      - "/root/sno-{{ item }}:/data:Z"
      - "/root/sno-{{ item }}:/ignition_data:Z"
      - "/var/lib/libvirt/images/sno-{{ item }}:/output_data:Z"
    workdir: "/data"
    command: "iso ignition embed /data/base.iso --force --ignition-file /ignition_data/bootstrap-in-place-for-live-iso.ign --output /output_data/embedded.iso"
  loop:
    - rhacm
    - edge1
    - edge2
  when: not embed_result.stat.exists

## TODO : Start task as async
- name: Start VM with ISO
  vars:
    vm_name: "ocp4-{{ item.key }}"
  ansible.builtin.command: 'virt-install --connect qemu:///system -n {{ vm_name }} -r {{ item.value.mem }} --vcpus {{ item.value.cpus }} 
  --cpu=host-passthrough --os-variant rhel8.1 --import --network network:ocp4-net,mac={{ item.value.base_network }} --graphics=none
  --events on_reboot=restart --cdrom "/var/lib/libvirt/images/sno-{{ item.key }}/embedded.iso" --disk pool=default,size="40" --boot hd,cdrom 
  --noautoconsole --wait=-1'
  with_dict: "{{ vms['sno'] }}"
  register: virt_output
  when: vm_name not in running_vm_list.list_vms

- name: Add VBMC entries for AI deployments
  ansible.builtin.command: "{{ item }}"
  with_items:
    - "vbmc add --username admin --password redhat --port 6230 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-bastion"
    - "vbmc add --username admin --password redhat --port 6231 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-edge1"
    - "vbmc add --username admin --password redhat --port 6232 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-edge2"
    - "vbmc start ocp4-bastion"
    - "vbmc start ocp4-edge1"
    - "vbmc start ocp4-edge2"
  register: vbmc_return
  failed_when: vbmc_return.rc > 1   

- name: Add extra VBMC entries for AI deployments
  ansible.builtin.command: "{{ item }}"
  with_items:
    - "vbmc add --username admin --password redhat --port 6233 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-edge3"
    - "vbmc add --username admin --password redhat --port 6234 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-edge4"
    - "vbmc start ocp4-edge3"
    - "vbmc start ocp4-edge4"
  register: vbmc_return
  when: extra_sno_nodes
  failed_when: vbmc_return.rc > 1   

- name: Copy SNO auths to bastion
  ansible.builtin.shell: 'scp -r -o "StrictHostKeyChecking no" "/root/sno-{{ item }}" root@192.168.123.100:/root/'
  loop:
    - rhacm
    - edge1
    - edge2
