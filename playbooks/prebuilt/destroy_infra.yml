---

- name: Build inventory if required
  hosts: localhost
  gather_facts: false
  tasks:

  - name: Check if inventory file exists
    ansible.builtin.stat:
      path: ../../inventory.yml
    register: inventory_file

  - name: Unknown host or empty inventory file!
    pause:
      prompt: |

        It looks like we haven't built server {{ prebuilt_ip }}!

        Do you want to attempt to clean it up? (Return, or Ctrl-C then A to cancel)
    when: not inventory_file.stat.exists

  - name: Build new inventory file for server
    ini_file:
      dest: ../../inventory.yml
      section: target
      option: "{{ prebuilt_ip }} ansible_ssh_common_args='-o StrictHostKeyChecking=no'"
      mode: 0666
      state: present
      backup: no
      allow_no_value: yes
    when: not inventory_file.stat.exists

  - meta: refresh_inventory

- name: Destroy Baremetal instance in provider {{ baremetal_provider }}
  hosts: target
  remote_user: root
  gather_facts: false
  vars_files:
    - "../../conf/vms.yml"
  tasks:

    - name: Get a list of all running VM's
      virt:
        command: list_vms
        state: running
      register: running_vm_list

    - name: Get a list of all defined VM's
      virt:
        command: list_vms
      register: vm_list

    - name: Destroy the extra nodes
      vars:
        vm_name: "ocp4-{{ item }}"
      virt:
        name: "ocp4-{{ item }}"
        command: destroy
      loop:
        - "bootstrap"
        - "bastion"
      when: vm_name in running_vm_list.list_vms

    - name: Undefine the extra nodes
      vars:
        vm_name: "ocp4-{{ item }}"
      virt:
        name: "ocp4-{{ item }}"
        command: undefine
      loop:
        - "bootstrap"
        - "bastion"
      when: vm_name in vm_list.list_vms

    - name: Destroy the workers
      vars:
        vm_name: "ocp4-{{ item.key }}"
      virt:
        name: "ocp4-{{ item.key }}"
        command: destroy
      with_dict: "{{ vms['workers'] }}"
      when: vm_name in running_vm_list.list_vms

    - name: Undefine the workers
      vars:
        vm_name: "ocp4-{{ item.key }}"
      virt:
        name: "ocp4-{{ item.key }}"
        command: undefine
      with_dict: "{{ vms['workers'] }}"
      when: vm_name in vm_list.list_vms

    - name: Destroy the masters
      vars:
        vm_name: "ocp4-{{ item.key }}"
      virt:
        name: "ocp4-{{ item.key }}"
        command: destroy
      with_dict: "{{ vms['masters'] }}"
      when: vm_name in running_vm_list.list_vms

    - name: Undefine the masters
      vars:
        vm_name: "ocp4-{{ item.key }}"
      virt:
        name: "ocp4-{{ item.key }}"
        command: undefine
      with_dict: "{{ vms['masters'] }}"
      when: vm_name in vm_list.list_vms

    - name: Destroy the edge nodes
      vars:
        vm_name: "ocp4-{{ item.key }}"
      virt:
        name: "ocp4-{{ item.key }}"
        command: destroy
      with_dict: "{{ vms['sno'] }}"
      when: vm_name in running_vm_list.list_vms

    - name: Undefine the edge nodes
      vars:
        vm_name: "ocp4-{{ item.key }}"
      virt:
        name: "ocp4-{{ item.key }}"
        command: undefine
      with_dict: "{{ vms['sno'] }}"
      when: vm_name in vm_list.list_vms

    - name: Get a list of disk images to delete
      ansible.builtin.find:
        paths: /var/lib/libvirt/images
        file_type: file
        patterns: '*ocp4*'
      register: disks_found

    - name: Build a file list of defined disks
      set_fact:
        disks_found_list: "{{ disks_found_list | default([]) | union([item.path]) }}"
      with_items:
        - "{{ disks_found.files }}"

    - name: Delete defined disks
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ disks_found_list }}"
      when: disks_found_list is defined

    - name: Remove any disks created for CNV
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/var/lib/libvirt/images/centos8-kvm-cnv.qcow2"
        - "/var/lib/libvirt/images/centos8-kvm-cnv.img"

    - name: Remove VBMC entries if IPI
      ansible.builtin.command: "vbmc delete {{ item }}"
      loop: "{{ vm_list.list_vms }}"
      register: vbmc_return
      failed_when: vbmc_return.rc > 1
      when: ocp4_aio_deploy_type == "ipi"

    - name: Disable VirtualBMC
      ansible.builtin.systemd:
        name: virtualbmc
        enabled: no
        state: stopped
      when: ocp4_aio_deploy_type == "ipi"

    - name: Remove VirtualBMC state file
      ansible.builtin.file:
        path: "/var/lib/vbmcd/.vbmc"
        state: absent
      when: ocp4_aio_deploy_type == "ipi"

    - name: Check if firewalld is available
      ansible.builtin.command: systemctl status firewalld
      register: firewalld_avail
      failed_when: firewalld_avail.rc == 1

    - name: Remove VBMC firewalld ports for IPI deployments
      firewalld:
        port: 6230-6236/udp
        zone: libvirt
        permanent: yes
        state: disabled
      when:
        - firewalld_avail.rc != 4
        - ocp4_aio_deploy_type == "ipi"

    - name: Remove Guacamole firewalld ports
      firewalld:
        port: "{{ item }}"
        zone: libvirt
        permanent: yes
        state: disabled
      loop:
        - "8080/tcp"
      when:
        - firewalld_avail.rc != 4

    - name: Reload Firewalld
      ansible.builtin.command: firewall-cmd --reload
      register: firewalld_return
      failed_when: firewalld_return.rc > 0
      when:
        - firewalld_avail.rc != 4
        - ocp4_aio_deploy_type == "ipi"

    - name: Disable VBMC iptables ports for IPI deployments
      ansible.builtin.iptables:
        chain: LIBVIRT_INP
        protocol: udp
        destination_port: "6230:6236"
        jump: ACCEPT
        state: absent
      when:
        - firewalld_avail.rc == 4
        - ocp4_aio_deploy_type == "ipi"

    - name: Disable Guacamole iptables ports
      ansible.builtin.iptables:
        chain: LIBVIRT_INP
        protocol: udp
        destination_port: "{{ item }}"
        jump: ACCEPT
        state: absent
      loop:
        - "8080"
      when:
        - firewalld_avail.rc == 4
        - ocp4_aio_deploy_type == "ipi"

    - name: Disable port 9001 forwarding to bastion:9001 with firewalld
      firewalld:
        port_forward:
          port: "9001"
          proto: tcp
          toaddr: 192.168.123.100
          toport: "9001"
        zone: public
        permanent: yes
        state: absent
      when:
        - firewalld_avail.rc != 4

    - name: Disable port 9001 on host
      ansible.builtin.iptables:
        state: absent
        chain: FORWARD
        protocol: tcp
        action: insert
        destination_port: "9001"
        jump: ACCEPT
      when:
        - firewalld_avail.rc == 4

    - name: Disable prerouting for port 9001
      ansible.builtin.iptables:
        state: absent
        action: insert
        table: nat
        chain: PREROUTING
        protocol: tcp
        match: tcp
        destination_port: "9001"
        jump: DNAT
        to_destination: 192.168.123.100:9001
      when:
        - firewalld_avail.rc == 4

    - name: Check if ocp4-net network is already configured
      ansible.builtin.command: virsh net-dumpxml ocp4-net
      register: ocp4_net_return
      failed_when: ocp4_net_return.rc > 1

    - name: Check if ocp4-prov-net network is already configured
      ansible.builtin.command: virsh net-dumpxml ocp4-provisioning
      register: ocp4_prov_return
      failed_when: ocp4_prov_return.rc > 1
      when: ocp4_aio_deploy_type == "ipi"

    - name: Remove OpenShift libvirt base network (192.168.123.100/24)
      ansible.builtin.shell: "{{ item }}"
      loop:
        - "virsh net-destroy ocp4-net"
        - "virsh net-undefine ocp4-net"
      when: ocp4_net_return.rc == 0
      register: ocp4_net_destroy
      failed_when: ocp4_net_destroy.rc > 1

    - name: Remove OpenShift libvirt provisioning network (172.22.0.0/24)
      ansible.builtin.shell: "{{ item }}"
      loop:
        - "virsh net-destroy ocp4-provisioning"
        - "virsh net-undefine ocp4-provisioning"
      when:
        - ocp4_aio_deploy_type == "ipi"
        - ocp4_prov_return.rc == 0
      register: ocp4_prov_destroy
      failed_when: ocp4_prov_destroy.rc > 1

    - name: Remove entries for bastion from known_hosts on target
      ansible.builtin.known_hosts:
        path: "/root/.ssh/known_hosts"
        name: "192.168.123.100"
        state: absent

    - name: Remove podman containers for Guac
      containers.podman.podman_container:
        name: "{{ item }}"
        state: absent
      loop:
        - postgres
        - guacamole
        - guacd

    - name: Remove Guacamole postgres data directory
      ansible.builtin.file:
        path: "/usr/local/pgsql/"
        state: absent

    - name: Remove sno directories 1/2
      ansible.builtin.file:
        path: "/var/lib/libvirt/images/sno-{{ item }}"
        state: absent
      loop:
        - rhacm
        - edge1
        - edge2

    - name: Remove sno directories 2/2
      ansible.builtin.file:
        path: "/root/sno-{{ item }}"
        state: absent
      loop:
        - rhacm
        - edge1
        - edge2

- name: Cleanup local system
  hosts: localhost
  tasks:

    - name: Remove dynamic inventory file
      ansible.builtin.file:
        path: ../../inventory.yml
        state: absent

    - name: Remove entries for bastion from known_hosts locally
      ansible.builtin.known_hosts:
        path: "~/.ssh/known_hosts"
        name: "192.168.123.100"
        state: absent

    - name: Remove entries for target from known_hosts
      ansible.builtin.known_hosts:
        path: "~/.ssh/known_hosts"
        name: "{{ groups['target'][0] }}"
        state: absent
      when: groups['target'] is defined

    - name: Remove generated directory
      ansible.builtin.file:
        path: "../../generated/"
        state: absent

    - name: Remove sno directories
      ansible.builtin.file:
        path: "/root/sno-{{ item }}"
        state: absent
      loop:
        - rhacm
        - edge1
        - edge2
